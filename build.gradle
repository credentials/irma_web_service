apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'eclipse-wtp'

//webAppDirName = 'WebContent'
//sourceSets.main.resources.srcDir 'data/'

// Add H2 to build dependencies so we can access it
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.h2database:h2:1.3.176"
        classpath 'org.akhikhl.gretty:gretty:+'
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        url "https://credentials.github.io/repos/maven2/"
    }
    maven {
        url "http://maven.restlet.org"
    }
    mavenCentral()
}

dependencies {
    providedCompile 'org.apache.tomcat:tomcat-catalina:7.0.41'
    providedCompile 'org.apache.tomcat:tomcat-util:7.0.41'

    compile "com.ibm.zurich.idmx:idemix_library:2.3.4"
    compile "net.sourceforge.scuba:scuba_smartcards:0.0.3"

    compile "org.irmacard.credentials:credentials_api:0.8"
    compile "org.irmacard.idemix:idemix_terminal:0.8"
    compile "org.irmacard.credentials:credentials_idemix:0.8"

    //compile files('WebContent/WEB-INF/lib/cert-cvc-1.3.0.jar')

    compile "org.restlet.jee:org.restlet:2.3.2"
    compile "org.restlet.jee:org.restlet.ext.json:2.3.2"
    compile "org.restlet.jee:org.restlet.ext.servlet:2.3.2"
    compile "org.restlet.jee:org.restlet.ext.xml:2.3.2"

    compile 'com.google.code.gson:gson:2.2.2'
    compile 'com.google.zxing:core:2.1.0'
    compile 'com.google.zxing:javase:2.1.0'

    compile 'ch.qos.logback:logback-classic:1.1.2'
    //compile 'org.slf4j:slf4j-api:1.7.12'
    //compile 'org.slf4j:slf4j-simple:1.7.12'

    //compile 'org.apache.logging.log4j:log4j-core:2.3'
    //compile 'org.apache.logging.log4j:log4j-api:2.3'

    gretty 'commons-dbcp:commons-dbcp:1.4'

    compile 'net.glxn:qrgen:1.4'

    compile 'mysql:mysql-connector-java:5.1.27'

    providedRuntime "com.h2database:h2:1.3.176"
}

gretty {
    contextConfigFile = file('src/test/resources/jetty-env.xml')
    scanInterval = 10
    onStart {
        //org.h2.tools.Server.main()
        org.h2.tools.Server.createTcpServer(null).start()
        org.h2.tools.Server.createWebServer(null).start()
    }
}

/*
startH2 {
    org.h2.tools.Server.main()
}
startH2.onlyIf { project.gradle.startParameter.taskNames.contains("appRun") }
*/
